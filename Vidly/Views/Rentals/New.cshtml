
@{
    ViewBag.Title = "New Rental Form";

}

<h2>New Rental Form</h2>

<form id="movieRental">
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
            <input type="text" id="customer" name="customer" data-rule-validCustomer="true" required value="" class="form-control" />
        </div>
    </div>
    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            <input id="movie" name="movie" data-rule-atLeastOneMovie="true" type="text" value="" class="form-control" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 col-sm-4">
            <ul id="movies" class="list-group"></ul>
        </div>
    </div>
    
    <button class="btn btn-primary">Submit</button>
</form>

@section scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            var vm = {
                movieIds: []
            };
            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                //prefetch: '../data/films/post_1960.json', --In this case we are not going to use this
                remote: {
                    //url: '../data/films/queries/%QUERY.json',
                    /*We need to provide a parameter here and set it to %QUERY,
                    this variable is specified below in the wild card
                    basically what the user types in the text box will be replaced here at the runtime
                    so with this later we can filter our customers and return those who match the query
                    */
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });
            /* Next we got to reference our text box, i am going to chnge this to an element with the id
             customer, which means we should assign this id to our text box.
             The first argument to the typeahead method is currently null, we can pass an object and
             configure the behaviour of typeahead as below
            */
            //$('#remote .typeahead').typeahead(null, {
            $('#customer').typeahead({
                minLength: 3,//typeahead will query the server when the users type atlease 3 characters
                highlight: true //character in the search result that match our query will be bold
            }, {
                name: 'customers',//next we need to change the name property to Customer
                display: 'Name',//what propert of customers we should display in our suggetion list
                source: customers//the source of this typeahead property is customers which is our bloodHead object defined above
            }).on("typeahead:select", function (e, customer) {
                vm.CustomerId = customer.Id;

            });

            //Typeahead for Movie
            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/Movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'movies',
                display: 'Name',
                source: movies
            }).on("typeahead:select", function (e, movie) {
                $("#movies").append("<li class='list-group-item'>" + movie.Name + "</li>");//we modify the DOM elemnt directly
                $("#movie").typeahead("val", "");
                vm.movieIds.push(movie.Id);
            });
            $.validator.addMethod("atLeastOneMovie", function () {
                return vm.movieIds.length > 0;

            }, "Please Select at least one Movie");

            $.validator.addMethod("validCustomer", function () {
                return vm.CustomerId && vm.CustomerId != 0;

            },"Please Select a Valid Customer");

            var validator=$("#movieRental").validate({
                submitHandler: function () {
                   

                    $.ajax({
                        url: "/api/MovieRental",
                        method: "post",
                        data: vm
                    })
                    .done(function () {
                        //console.log("done");
                        toastr.success("Rentals Recorded Successfully...");
                        $("#customer").typeahead("val", "");
                        $("#movie").typeahead("val", "");
                        $("#movies").empty();
                        vm = { movieIds: [] };
                        validator.resetForm();
                    })
                    .fail(function () {
                        toastr.error("Error Occured...");
                    });

                    return false;
                }
            });

            //$("#movieRental").submit(function (e) {
            //e.preventDefault();
            //});

        });
    </script>
}


